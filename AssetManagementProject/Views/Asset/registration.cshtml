@model IEnumerable<AssetManagementProject.Models.Asset>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor

@{
    ViewData["Title"] = "Asset Registration";
    Layout = null;
}

<style>
    h2 {
        color: white;
        text-align: center;
        margin-bottom: 30px;
    }

    .registration-container {
        max-width: 1000px;
        margin: auto;
        background-color: #1f1f1f;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
        position: relative;
    }

    .form-group {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        gap: 20px;
    }

        .form-group label {
            flex: 1;
            font-weight: bold;
            color: #ddd;
        }

        .form-group input,
        .form-group select {
            flex: 2;
            padding: 8px;
            border: 1px solid #444;
            border-radius: 6px;
            background: #1f2a33;
            color: #fff;
        }

    .button-group {
        text-align: center;
        margin-top: 30px;
        margin-bottom: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 10px;
    }

        .button-group button {
            padding: 10px 20px;
            border: none;
            margin: 0 10px;
            border-radius: 8px;
            background-color: #007bff;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s ease;
        }

            .button-group button:hover {
                background-color: #0056b3;
            }

    table {
        width: 100%;
        margin-top: 40px;
        border-collapse: collapse;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        background: #0f1e27;
        color: #eee;
        border-radius: 6px;
        overflow: hidden;
    }

    th, td {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #1f3a4f;
    }

    th {
        background-color: #007bff;
        color: white;
    }

    tr:hover {
        background-color: #1c3b3f;
        cursor: pointer;
    }

    #toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: #28a745;
        color: white;
        border-radius: 8px;
        display: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 1000;
        min-width: 250px;
        font-weight: 500;
    }

        #toast.error {
            background: #c0392b;
        }

        #toast button {
            background: none;
            border: none;
            color: #fff;
            font-size: 16px;
            margin-left: 10px;
            cursor: pointer;
        }

    #formContainer {
        overflow: hidden;
        max-height: 0;
        opacity: 0;
        transform: translateY(-10px);
        transition: max-height 0.4s ease, opacity 0.4s ease, transform 0.4s ease;
    }

        #formContainer.expanded {
            max-height: 2000px; 
            opacity: 1;
            transform: translateY(0);
        }

</style>

<div class="registration-container">
    <div class="button-group">
        <h2>Asset Registration</h2>
        <button id="toggleRegisterButton" type="button" onclick="toggleForm()">Register Asset</button>
    </div>

    <div id="formContainer">
        <form id="assetForm" method="post" asp-controller="Asset" asp-action="RegisterAsset">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <label for="assetName">Asset Name</label>
                <input type="text" id="assetName" name="AssetName" placeholder="Enter Asset Name" required>
            </div>
             <div class="form-group">
                <label for="assetType">Asset Type</label>
                <select name="AssetType">
                    @foreach (var type in (List<AssetType>)ViewBag.AssetTypes)
                    {
                      <option value="@type.AssetType1">@type.AssetTypeDp</option>
                    }
                </select>
            </div> 

            <div class="form-group">
                <label for="count">Count</label>
                <input type="number" id="count" name="Count" placeholder="e.g. 5" min="1" value="1">
            </div>

            <div class="form-group">
                <label for="status">Status</label>
                <select id="status" name="Status" required>
                    <option>Active</option>
                    <option>Issued</option>
                    <option>Damaged</option>
                    <option>Retired</option>
                </select>
            </div>

            <div class="form-group">
                <label for="warranty">Warranty End Date</label>
                <input type="date" id="warranty" name="WarrantyEnd">
            </div>

            <div class="form-group">
                <label for="storeItemId">Store Item ID</label>
                <input type="text" id="storeItemId" name="StoreItemId" placeholder="Optional">
            </div>

            <div class="form-group">
                <label for="storeItemCode">Store Item Code</label>
                <input type="text" id="storeItemCode" name="StoreItemCode" placeholder="Optional">
            </div>

            <div class="form-group">
                <label for="vendor">Vendor</label>
                <select id="vendor" name="VendorId">
                    <option value="">Select Vendor</option>
                    @foreach (var v in (List<AssetManagementProject.Models.Vendor>)ViewBag.Vendors)
                    {
                        <option value="@v.VendorId">@v.Name / @v.ContactPerson</option>
                    }
                </select>
            </div>

            <div class="button-group">
                <button type="submit">Register Asset</button>
                <button type="button" onclick="collapseForm()">Cancel</button>
                <button type="reset">Clear</button>
            </div>
        </form>
    </div>

    <hr />
    <h3 style="text-align:center; margin-top:40px;">Registered Assets</h3>

    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Count</th>
                <th>Status</th>
                <th>Vendor</th>
                <th>Warranty End</th>
            </tr>
        </thead>
        <tbody id="assetTableBody">
            @if (!Model.Any())
            {
                <tr>
                    <td colspan="6">No assets available.</td>
                </tr>
            }
            else
            {
                foreach (var a in Model)
                {
                    <tr>
                        <td>@a.AssetName</td>
                        <td>@a.AssetType</td>
                        <td>@a.Count</td>
                        <td>@a.Status</td>
                        <td>@a.Vendor?.Name</td>
                        <td>@(a.WarrantyEnd?.ToString("yyyy-MM-dd") ?? "-")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div id="toast">
    <span id="toastMessage"></span>
    <button onclick="hideToast()">×</button>
</div>

<script>
    function toggleForm() {
        const form = document.getElementById("formContainer");
        const registerButton = document.getElementById("toggleRegisterButton");

        form.style.display = "block";
        form.classList.add("expanded");
        registerButton.style.display = "none";
    }

    function collapseForm() {
        const form = document.getElementById("formContainer");
        const registerButton = document.getElementById("toggleRegisterButton");

        form.classList.remove("expanded");

        setTimeout(() => {
            registerButton.style.display = "inline-block";
        }, 400); 
    }

    function showToast(message, isSuccess = true) {
        const toast = document.getElementById("toast");
        const msg = document.getElementById("toastMessage");
        msg.textContent = message;
        toast.classList.toggle("error", !isSuccess);
        toast.style.display = "block";
        setTimeout(() => hideToast(), 3000);
    }

    function hideToast() {
        const toast = document.getElementById("toast");
        toast.style.display = "none";
    }

    document.getElementById("assetForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const form = this;
        const formData = new FormData(form);

        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';

        try {
            const resp = await fetch('@Url.Action("RegisterAsset", "Asset")', {
                method: 'POST',
                body: formData
            });

            const data = await resp.json();

            if (resp.ok && data.success) {
                showToast(data.message || "Asset registered successfully.");

                // update table
                const tbody = document.getElementById("assetTableBody");
                const vendorName = document.querySelector("#vendor option:checked")?.text || "";
                const newRow = document.createElement("tr");
                newRow.innerHTML = `
                    <td>${formData.get("AssetName") || ""}</td>
                    <td>${formData.get("AssetType") || ""}</td>
                    <td>${formData.get("Count") || ""}</td>
                    <td>${formData.get("Status") || ""}</td>
                    <td>${vendorName}</td>
                    <td>${formData.get("WarrantyEnd") || "-"}</td>
                `;

                // remove "no assets" if it exists
                if (tbody.children.length === 1 && tbody.children[0].children[0].colSpan == 6) {
                    tbody.innerHTML = "";
                }
                tbody.prepend(newRow);

                form.reset();
                collapseForm();
            } else {
                let msg = data?.message || "Failed to register asset.";
                showToast(msg, false);
            }
        } catch (ex) {
            console.error(ex);
            showToast("Network or server error.", false);
        }
    });
</script>
